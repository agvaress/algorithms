# Best: O(nlog(n)) - time; if pivot divides an array 50/50
# Worst: O(n^2) - time; if sub array with length 1
# Avg: O(nlog(n)) -time
# O(log(n)) - space
# In case of best time O(nlog(n)) quick sort is quicker than merge sort, because 'c' - constant is less.

# 1. Naive  implementation
def quick_sort(A):
    if len(A) <= 1:
        return
    L = []
    M = []
    R = []
    pivotIdx = A[0]
    for i in A:
        if i < pivotIdx:
            L.append(i)
        elif i == pivotIdx:
            M.append(i)
        else:
            R.append(i)
    quick_sort(L)
    quick_sort(R)
    k = 0
    for i in L + M + R:
        A[k] = i
        k += 1
    return A


print(quick_sort([5, 2, 5, 7, 1, 0, 3]))


# 2. Memory optimized
def quick_sort(array):
    quick_sort_helper(array, 0, len(array) - 1)
    return array


def quick_sort_helper(array, startIdx, endIdx):
    if startIdx >= endIdx:
        return
    pivotIdx = startIdx
    leftIdx = startIdx + 1
    rightIdx = endIdx
    while rightIdx >= leftIdx:
        if array[leftIdx] > array[pivotIdx] and array[rightIdx] < array[pivotIdx]:
            swap(leftIdx, rightIdx, array)
        if array[leftIdx] <= array[pivotIdx]:
            leftIdx += 1
        if array[rightIdx] >= array[pivotIdx]:
            rightIdx -= 1
    swap(pivotIdx, rightIdx, array)
    leftSubarrayIsSmaller = rightIdx - 1 - startIdx < endIdx - (rightIdx + 1)
    if leftSubarrayIsSmaller:
        quick_sort_helper(array, startIdx, rightIdx - 1)
        quick_sort_helper(array, rightIdx + 1, endIdx)
    else:
        quick_sort_helper(array, rightIdx + 1, endIdx)
        quick_sort_helper(array, startIdx, rightIdx - 1)


def swap(i, j, array):
    array[i], array[j] = array[j], array[i]
